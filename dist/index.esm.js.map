{"version":3,"file":"index.esm.js","sources":["../src/useMultipleState.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\n/***\r\n * UseMultipleState is a powerful hook that allows you to manage multiple states in a single hook.\r\n * @param initialStates\r\n * @returns {(function(): *)|putAll|{getAll: ((function(*): ({[p: string]: *}))|*), state: {}}|((function(): null) & {get: (function(): null), put: put})}\r\n */\r\nconst useMultipleState = (initialStates) => {\r\n  const [states, setStates] = useState(initialStates);\r\n  /***\r\n   * createStateManager is a helper function that creates a state manager for a specific key.\r\n   * @param key\r\n   * @returns {{get: ((function(): (function()))|*), value: *, put: put}}\r\n   */\r\n  const createStateManager = (key) => {\r\n    const put = (valueOrUpdater, callback) => {\r\n      setStates((prev) => {\r\n        const currentValue = prev[key];\r\n        let newValue;\r\n\r\n        if (typeof valueOrUpdater === \"function\") {\r\n          newValue = valueOrUpdater(prev);\r\n        } else if (\r\n            typeof currentValue === \"object\" &&\r\n            currentValue !== null &&\r\n            typeof valueOrUpdater === \"object\" &&\r\n            valueOrUpdater !== null &&\r\n            !Array.isArray(valueOrUpdater)\r\n        ) {\r\n          newValue = { ...currentValue, ...valueOrUpdater };\r\n        } else {\r\n          newValue = valueOrUpdater;\r\n        }\r\n\r\n        if (JSON.stringify(prev) === JSON.stringify(newValue)) {\r\n          return prev;\r\n        }\r\n\r\n        const updatedState = { ...prev, [key]: newValue };\r\n\r\n        if (callback) callback(updatedState[key]);\r\n        return updatedState;\r\n      });\r\n    };\r\n    return {\r\n      value : !(key in states) ? null : states[key] ,\r\n      get: () => {\r\n        if (!(key in states)) {\r\n          console.warn(`La clave \"${key}\" no existe en el estado.`);\r\n          return () => {\r\n            return null;\r\n          }\r\n        }\r\n        return states[key]\r\n      },\r\n      put,\r\n    };\r\n  };\r\n  /***\r\n   * putAll is a function that allows you to update multiple states at once.\r\n   * @param valueOrUpdater\r\n   * @param callback\r\n   */\r\n  const putAll = (valueOrUpdater, callback) => {\r\n    setStates((prev) => {\r\n      let newState;\r\n      if (typeof valueOrUpdater === \"function\") {\r\n        newState = valueOrUpdater(prev);\r\n      } else if (\r\n        typeof valueOrUpdater === \"object\" &&\r\n        valueOrUpdater !== null\r\n      ) {\r\n        newState = { ...prev, ...valueOrUpdater };\r\n      } else {\r\n        throw new Error(\r\n          \"Para actualizar todo el estado, debe proporcionarse un objeto o Clave de objeto para actualizar una especifica.\"\r\n        );\r\n      }\r\n      if (callback) callback(newState);\r\n      return newState;\r\n    });\r\n  };\r\n  /***\r\n   * getAll is a function that allows you to get all the states or specific states.\r\n   * @param keys\r\n   * @returns {{[p: string]: *}|*}\r\n   */\r\n  const getAll = (keys) => {\r\n    if (!keys) {\r\n      return { ...states }\r\n    }\r\n    if (!Array.isArray(keys)) {\r\n      throw new Error('La entrada a getAll debe ser un array de claves.')\r\n    }\r\n    return keys.reduce((result, key) => {\r\n      if (key in states) {\r\n        result[key] = states[key]\r\n      } else {\r\n        throw new Error(`El estado con clave \"${key}\" no existe.`)\r\n      }\r\n      return result\r\n    }, {})\r\n  }\r\n  /***\r\n   * state is a proxy object that allows you to get and update the states.\r\n   * @type {{}}\r\n   */\r\n  const state = new Proxy(\r\n      {},\r\n      {\r\n        /***\r\n         * get is a trap that allows you to get the states.\r\n         * @param _\r\n         * @param prop\r\n         * @returns {(function(): *)|putAll|((function(): null) & {get: (function(): null), put: put})}\r\n         */\r\n        get(_, prop) {\r\n          if (prop === \"put\") {\r\n            return putAll;\r\n          }\r\n          if (prop in states) {\r\n            const { value, put , get } = createStateManager(prop);\r\n            /***\r\n             * getterFunction is a function that allows you to get and update the specific state.\r\n             */\r\n            const getterFunction = () => value;\r\n            /***\r\n             * put is a function that allows you to update the specific state.\r\n             * @type {put}\r\n             */\r\n            getterFunction.put = put;\r\n            /***\r\n             * get is a function that allows you to get the specific state.\r\n             * @type {(function(): function())|*}\r\n             */\r\n            getterFunction.get = get;\r\n            return getterFunction;\r\n          }\r\n          /***\r\n           * defaultValue is a function that returns null if the state does not exist.\r\n           * @type {(function(): null) & {get: (function(): null), put: defaultValue.put}}\r\n           */\r\n          const defaultValue = Object.assign(\r\n            () => {\r\n              return null;\r\n            },\r\n            {\r\n              get: () => {\r\n                return null;\r\n              },\r\n              put: () => {},\r\n            }\r\n          );\r\n          return defaultValue\r\n        },\r\n      }\r\n  );\r\n  return {\r\n    state,\r\n    getAll\r\n  };\r\n};\r\n\r\nexport default useMultipleState;\r\n"],"names":["useMultipleState","initialStates","_useState","useState","_useState2","_slicedToArray","states","setStates","createStateManager","key","put","valueOrUpdater","callback","prev","currentValue","newValue","_typeof","Array","isArray","_objectSpread","JSON","stringify","updatedState","_defineProperty","value","get","console","warn","concat","putAll","newState","Error","getAll","keys","reduce","result","state","Proxy","_","prop","_createStateManager","getterFunction","defaultValue","Object","assign"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,aAAa,EAAK;AAC1C,EAAA,IAAAC,SAAA,GAA4BC,QAAQ,CAACF,aAAa,CAAC;IAAAG,UAAA,GAAAC,cAAA,CAAAH,SAAA,EAAA,CAAA,CAAA;AAA5CI,IAAAA,MAAM,GAAAF,UAAA,CAAA,CAAA,CAAA;AAAEG,IAAAA,SAAS,GAAAH,UAAA,CAAA,CAAA,CAAA,CAAA;AACxB;AACF;AACA;AACA;AACA;AACE,EAAA,IAAMI,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,GAAG,EAAK;IAClC,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAIC,cAAc,EAAEC,QAAQ,EAAK;MACxCL,SAAS,CAAC,UAACM,IAAI,EAAK;AAClB,QAAA,IAAMC,YAAY,GAAGD,IAAI,CAACJ,GAAG,CAAC,CAAA;AAC9B,QAAA,IAAIM,QAAQ,CAAA;AAEZ,QAAA,IAAI,OAAOJ,cAAc,KAAK,UAAU,EAAE;AACxCI,UAAAA,QAAQ,GAAGJ,cAAc,CAACE,IAAI,CAAC,CAAA;AACjC,SAAC,MAAM,IACHG,OAAA,CAAOF,YAAY,CAAA,KAAK,QAAQ,IAChCA,YAAY,KAAK,IAAI,IACrBE,OAAA,CAAOL,cAAc,CAAA,KAAK,QAAQ,IAClCA,cAAc,KAAK,IAAI,IACvB,CAACM,KAAK,CAACC,OAAO,CAACP,cAAc,CAAC,EAChC;UACAI,QAAQ,GAAAI,cAAA,CAAAA,cAAA,KAAQL,YAAY,CAAA,EAAKH,cAAc,CAAE,CAAA;AACnD,SAAC,MAAM;AACLI,UAAAA,QAAQ,GAAGJ,cAAc,CAAA;AAC3B,SAAA;AAEA,QAAA,IAAIS,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,KAAKO,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,EAAE;AACrD,UAAA,OAAOF,IAAI,CAAA;AACb,SAAA;AAEA,QAAA,IAAMS,YAAY,GAAAH,cAAA,CAAAA,cAAA,CAAA,EAAA,EAAQN,IAAI,CAAA,EAAA,EAAA,EAAAU,eAAA,CAAA,EAAA,EAAGd,GAAG,EAAGM,QAAQ,CAAE,CAAA,CAAA;QAEjD,IAAIH,QAAQ,EAAEA,QAAQ,CAACU,YAAY,CAACb,GAAG,CAAC,CAAC,CAAA;AACzC,QAAA,OAAOa,YAAY,CAAA;AACrB,OAAC,CAAC,CAAA;KACH,CAAA;IACD,OAAO;AACLE,MAAAA,KAAK,EAAG,EAAEf,GAAG,IAAIH,MAAM,CAAC,GAAG,IAAI,GAAGA,MAAM,CAACG,GAAG,CAAC;AAC7CgB,MAAAA,GAAG,EAAE,SAALA,GAAGA,GAAQ;AACT,QAAA,IAAI,EAAEhB,GAAG,IAAIH,MAAM,CAAC,EAAE;AACpBoB,UAAAA,OAAO,CAACC,IAAI,CAAA,aAAA,CAAAC,MAAA,CAAcnB,GAAG,+BAA2B,CAAC,CAAA;AACzD,UAAA,OAAO,YAAM;AACX,YAAA,OAAO,IAAI,CAAA;WACZ,CAAA;AACH,SAAA;QACA,OAAOH,MAAM,CAACG,GAAG,CAAC,CAAA;OACnB;AACDC,MAAAA,GAAG,EAAHA,GAAAA;KACD,CAAA;GACF,CAAA;AACD;AACF;AACA;AACA;AACA;EACE,IAAMmB,MAAM,GAAG,SAATA,MAAMA,CAAIlB,cAAc,EAAEC,QAAQ,EAAK;IAC3CL,SAAS,CAAC,UAACM,IAAI,EAAK;AAClB,MAAA,IAAIiB,QAAQ,CAAA;AACZ,MAAA,IAAI,OAAOnB,cAAc,KAAK,UAAU,EAAE;AACxCmB,QAAAA,QAAQ,GAAGnB,cAAc,CAACE,IAAI,CAAC,CAAA;OAChC,MAAM,IACLG,OAAA,CAAOL,cAAc,CAAK,KAAA,QAAQ,IAClCA,cAAc,KAAK,IAAI,EACvB;QACAmB,QAAQ,GAAAX,cAAA,CAAAA,cAAA,KAAQN,IAAI,CAAA,EAAKF,cAAc,CAAE,CAAA;AAC3C,OAAC,MAAM;AACL,QAAA,MAAM,IAAIoB,KAAK,CACb,iHACF,CAAC,CAAA;AACH,OAAA;AACA,MAAA,IAAInB,QAAQ,EAAEA,QAAQ,CAACkB,QAAQ,CAAC,CAAA;AAChC,MAAA,OAAOA,QAAQ,CAAA;AACjB,KAAC,CAAC,CAAA;GACH,CAAA;AACD;AACF;AACA;AACA;AACA;AACE,EAAA,IAAME,MAAM,GAAG,SAATA,MAAMA,CAAIC,IAAI,EAAK;IACvB,IAAI,CAACA,IAAI,EAAE;MACT,OAAAd,cAAA,KAAYb,MAAM,CAAA,CAAA;AACpB,KAAA;AACA,IAAA,IAAI,CAACW,KAAK,CAACC,OAAO,CAACe,IAAI,CAAC,EAAE;AACxB,MAAA,MAAM,IAAIF,KAAK,CAAC,kDAAkD,CAAC,CAAA;AACrE,KAAA;IACA,OAAOE,IAAI,CAACC,MAAM,CAAC,UAACC,MAAM,EAAE1B,GAAG,EAAK;MAClC,IAAIA,GAAG,IAAIH,MAAM,EAAE;AACjB6B,QAAAA,MAAM,CAAC1B,GAAG,CAAC,GAAGH,MAAM,CAACG,GAAG,CAAC,CAAA;AAC3B,OAAC,MAAM;AACL,QAAA,MAAM,IAAIsB,KAAK,CAAA,wBAAA,CAAAH,MAAA,CAAyBnB,GAAG,kBAAc,CAAC,CAAA;AAC5D,OAAA;AACA,MAAA,OAAO0B,MAAM,CAAA;KACd,EAAE,EAAE,CAAC,CAAA;GACP,CAAA;AACD;AACF;AACA;AACA;AACE,EAAA,IAAMC,KAAK,GAAG,IAAIC,KAAK,CACnB,EAAE,EACF;AACE;AACR;AACA;AACA;AACA;AACA;AACQZ,IAAAA,GAAG,WAAHA,GAAGA,CAACa,CAAC,EAAEC,IAAI,EAAE;MACX,IAAIA,IAAI,KAAK,KAAK,EAAE;AAClB,QAAA,OAAOV,MAAM,CAAA;AACf,OAAA;MACA,IAAIU,IAAI,IAAIjC,MAAM,EAAE;AAClB,QAAA,IAAAkC,mBAAA,GAA6BhC,kBAAkB,CAAC+B,IAAI,CAAC;UAA7Cf,KAAK,GAAAgB,mBAAA,CAALhB,KAAK;UAAEd,GAAG,GAAA8B,mBAAA,CAAH9B,GAAG;UAAGe,GAAG,GAAAe,mBAAA,CAAHf,GAAG,CAAA;AACxB;AACZ;AACA;AACY,QAAA,IAAMgB,cAAc,GAAG,SAAjBA,cAAcA,GAAA;AAAA,UAAA,OAASjB,KAAK,CAAA;AAAA,SAAA,CAAA;AAClC;AACZ;AACA;AACA;QACYiB,cAAc,CAAC/B,GAAG,GAAGA,GAAG,CAAA;AACxB;AACZ;AACA;AACA;QACY+B,cAAc,CAAChB,GAAG,GAAGA,GAAG,CAAA;AACxB,QAAA,OAAOgB,cAAc,CAAA;AACvB,OAAA;AACA;AACV;AACA;AACA;AACU,MAAA,IAAMC,YAAY,GAAGC,MAAM,CAACC,MAAM,CAChC,YAAM;AACJ,QAAA,OAAO,IAAI,CAAA;AACb,OAAC,EACD;AACEnB,QAAAA,GAAG,EAAE,SAALA,GAAGA,GAAQ;AACT,UAAA,OAAO,IAAI,CAAA;SACZ;AACDf,QAAAA,GAAG,EAAE,SAALA,GAAGA,GAAQ,EAAC;AACd,OACF,CAAC,CAAA;AACD,MAAA,OAAOgC,YAAY,CAAA;AACrB,KAAA;AACF,GACJ,CAAC,CAAA;EACD,OAAO;AACLN,IAAAA,KAAK,EAALA,KAAK;AACLJ,IAAAA,MAAM,EAANA,MAAAA;GACD,CAAA;AACH;;;;"}